

# This file was *autogenerated* from the file ./gen.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_512 = Integer(512); _sage_const_64 = Integer(64); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3)
import secrets
p = random_prime(_sage_const_1  << _sage_const_512 )

flag = b"ACSC{have_you_already_read_the_swap<-->swap?}"
flag += secrets.token_bytes(_sage_const_64  - len(flag))
x = int.from_bytes(flag, "big")
y = randint(_sage_const_2 , p)

assert _sage_const_0  < x < p
assert _sage_const_0  < y < p
assert x != y

F = GF(p)['a']; (a,) = F._first_ngens(1)

f = (y**_sage_const_3  - x**_sage_const_3 ) + a*(y - x) - (x**_sage_const_2  - y**_sage_const_2 )
a = int(f.roots()[_sage_const_0 ][_sage_const_0 ])

F = GF(p)['b']; (b,) = F._first_ngens(1)
f1 = x**_sage_const_3  + a*x + b - y**_sage_const_2 
f2 = y**_sage_const_3  + a*y + b - x**_sage_const_2 

b1 = int(f1.roots()[_sage_const_0 ][_sage_const_0 ])
b2 = int(f2.roots()[_sage_const_0 ][_sage_const_0 ])
assert b1 == b2
b = b1

EC = EllipticCurve(GF(p), [a, b1])
assert EC(x, y)
assert EC(y, x)

print("p = {}".format(p))
print("a = {}".format(a))
print("b = {}".format(b))

